//
//  RemedyCriteriaValidationTests.swift
//
//
//  Created by Greg Bolsinga on 2/9/24.
//

import Foundation
import Testing

@testable import iTunes

struct RemedyCriteriaValidationTests {
  let h = CriterionVariantHelper(
    album: "l", artist: "a", song: "s", playCount: 3,
    playDate: Date(timeIntervalSince1970: Double(1_075_937_542)), persistentID: 123456)

  @Test func ignore() {
    let r = Remedy.ignore

    #expect(!r.validate(h.albumCriterion))
    #expect(r.validate(h.artistCriterion))
    #expect(r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(!r.validate(h.artistSongCriterion))
    #expect(!r.validate(h.albumArtistSongCriterion))
    #expect(!r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(!r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(!r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(!r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func replaceAlbum() {
    let r = Remedy.replaceAlbum("a")

    #expect(!r.validate(h.albumCriterion))
    #expect(!r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(r.validate(h.artistSongCriterion))
    #expect(r.validate(h.albumArtistSongCriterion))
    #expect(r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func repairEmptyKind() {
    let r = Remedy.repairEmptyKind("k")

    #expect(!r.validate(h.albumCriterion))
    #expect(!r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(!r.validate(h.artistSongCriterion))
    #expect(r.validate(h.albumArtistSongCriterion))
    #expect(!r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(!r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(!r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(!r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func replaceSortArtist() {
    let r = Remedy.replaceSortArtist("a")

    #expect(!r.validate(h.albumCriterion))
    #expect(r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(!r.validate(h.artistSongCriterion))
    #expect(!r.validate(h.albumArtistSongCriterion))
    #expect(!r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(!r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(!r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(!r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func replaceTrackCount() {
    let r = Remedy.replaceTrackCount(3)

    #expect(r.validate(h.albumCriterion))
    #expect(r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(r.validate(h.albumPlayDateCriterion))
    #expect(r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistCriterion))
    #expect(r.validate(h.albumSongCriterion))
    #expect(r.validate(h.artistSongCriterion))
    #expect(r.validate(h.albumArtistSongCriterion))
    #expect(r.validate(h.albumArtistPlayCountCriterion))
    #expect(r.validate(h.albumSongPlayCountCriterion))
    #expect(r.validate(h.artistSongPlayCountCriterion))
    #expect(r.validate(h.albumPlayCountCriterion))
    #expect(r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(r.validate(h.albumArtistPlayDateCriterion))
    #expect(r.validate(h.albumSongPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func repairEmptyTrackNumber() {
    let r = Remedy.repairEmptyTrackNumber(3)

    #expect(!r.validate(h.albumCriterion))
    #expect(!r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(r.validate(h.artistSongCriterion))
    #expect(r.validate(h.albumArtistSongCriterion))
    #expect(r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func repairEmptyYear() {
    let r = Remedy.repairEmptyYear(1970)

    #expect(r.validate(h.albumCriterion))
    #expect(!r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistCriterion))
    #expect(r.validate(h.albumSongCriterion))
    #expect(r.validate(h.artistSongCriterion))
    #expect(r.validate(h.albumArtistSongCriterion))
    #expect(r.validate(h.albumArtistPlayCountCriterion))
    #expect(r.validate(h.albumSongPlayCountCriterion))
    #expect(r.validate(h.artistSongPlayCountCriterion))
    #expect(r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(r.validate(h.albumArtistPlayDateCriterion))
    #expect(r.validate(h.albumSongPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func replaceArtist() {
    let r = Remedy.replaceArtist("a")

    #expect(!r.validate(h.albumCriterion))
    #expect(r.validate(h.artistCriterion))
    #expect(r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(r.validate(h.artistPlayDateCriterion))
    #expect(r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistCriterion))
    #expect(r.validate(h.albumSongCriterion))
    #expect(r.validate(h.artistSongCriterion))
    #expect(r.validate(h.albumArtistSongCriterion))
    #expect(r.validate(h.albumArtistPlayCountCriterion))
    #expect(r.validate(h.albumSongPlayCountCriterion))
    #expect(r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(r.validate(h.artistPlayCountCriterion))
    #expect(r.validate(h.songPlayCountCriterion))
    #expect(r.validate(h.albumArtistPlayDateCriterion))
    #expect(r.validate(h.albumSongPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(r.validate(h.songPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func replacePlayCount() {
    let r = Remedy.replacePlayCount(3)

    #expect(!r.validate(h.albumCriterion))
    #expect(!r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(!r.validate(h.artistSongCriterion))
    #expect(!r.validate(h.albumArtistSongCriterion))
    #expect(!r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(!r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(!r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func replacePlayDate() {
    let r = Remedy.replacePlayDate(Date(timeIntervalSince1970: Double(1_075_937_542)))

    #expect(!r.validate(h.albumCriterion))
    #expect(!r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(!r.validate(h.artistSongCriterion))
    #expect(!r.validate(h.albumArtistSongCriterion))
    #expect(!r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(!r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func replaceSong() {
    let r = Remedy.replaceSong("s")

    #expect(!r.validate(h.albumCriterion))
    #expect(!r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(!r.validate(h.artistSongCriterion))
    #expect(r.validate(h.albumArtistSongCriterion))
    #expect(!r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(!r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(!r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func replaceDiscCount() {
    let r = Remedy.replaceDiscCount(3)

    #expect(!r.validate(h.albumCriterion))
    #expect(!r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(!r.validate(h.artistSongCriterion))
    #expect(r.validate(h.albumArtistSongCriterion))
    #expect(!r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(!r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(!r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(!r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }

  @Test func replaceDiscNumber() {
    let r = Remedy.replaceDiscNumber(3)

    #expect(!r.validate(h.albumCriterion))
    #expect(!r.validate(h.artistCriterion))
    #expect(!r.validate(h.songCriterion))
    #expect(!r.validate(h.playCountCriterion))
    #expect(!r.validate(h.playDateCriterion))
    #expect(!r.validate(h.persistentIDCriterion))
    #expect(!r.validate(h.albumPlayDateCriterion))
    #expect(!r.validate(h.artistPlayDateCriterion))
    #expect(!r.validate(h.songPlayDateCriterion))
    #expect(!r.validate(h.playCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistCriterion))
    #expect(!r.validate(h.albumSongCriterion))
    #expect(!r.validate(h.artistSongCriterion))
    #expect(r.validate(h.albumArtistSongCriterion))
    #expect(!r.validate(h.albumArtistPlayCountCriterion))
    #expect(!r.validate(h.albumSongPlayCountCriterion))
    #expect(!r.validate(h.artistSongPlayCountCriterion))
    #expect(!r.validate(h.albumPlayCountCriterion))
    #expect(!r.validate(h.artistPlayCountCriterion))
    #expect(!r.validate(h.songPlayCountCriterion))
    #expect(!r.validate(h.albumArtistPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayDateCriterion))
    #expect(!r.validate(h.albumArtistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistSongPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumPlayCountPlayDateCriterion))
    #expect(!r.validate(h.artistPlayCountPlayDateCriterion))
    #expect(!r.validate(h.songPlayCountPlayDateCriterion))
    #expect(!r.validate(h.albumArtistSongPlayCountCriterion))
    #expect(!r.validate(h.allCriterion))
    #expect(!r.validate([]))
  }
}
