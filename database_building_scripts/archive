#!/bin/sh

BACKUP=~/Documents/backup
ARCHIVE=$BACKUP/archive/

TRASH=$BACKUP/trash/

if [ -z $BACKUP ]
then
 echo Need to supply a backup directory to archive.
 exit 1
fi
if [ ! -d $BACKUP ]
then
 echo $BACKUP does not exist.
 exit 1
fi

if [ -z $ARCHIVE ]
then
 echo Need to supply a archive directory.
 exit 1
fi
if [ ! -d $ARCHIVE ]
then
 echo $ARCHIVE does not exist.
 exit 1
fi

mkdir -p $TRASH

CURDAY=`date "+%d"`

# This is going to be cutting into the previous month
#  and perhaps the previous year.
if [ $CURDAY -le 7 ]
then
 CUTOFFMONTH=`date "+%m"`
 if [ $CUTOFFMONTH -eq 1 ]
 then
  CUTOFFMONTH=12
 else
  CUTOFFMONTH=$(($CUTOFFMONTH - 1))
 fi
 
 CUTOFFYEAR=`date "+%Y"`
 if [ $CUTOFFMONTH -eq 12 ]
 then
  CUTOFFYEAR=$(($CUTOFFYEAR - 1))
 fi

 # See if date 28 - (7 - CURDAY) exists. then increase 28 up to 31.
 for (( CHECKDATE=$((28 - (7 - $CURDAY)));
        $CHECKDATE <= 31;
        CHECKDATE=$(($CHECKDATE + 1)) ))
 do
  CHECKDATES="$CHECKDATES $CHECKDATE"
 done

 for LASTDAY in $CHECKDATES
 do
  if [ -z $CUTOFFDAY ]
  then
   if test -e $BACKUP/backup-cvs-$CUTOFFYEAR-$CUTOFFMONTH-$LASTDAY.dmg
   then
    CUTOFFDAY=$LASTDAY
   fi
  fi
 done

 CUTOFFDATE=$CUTOFFYEAR-$CUTOFFMONTH-$CUTOFFDAY
else
 CUTOFFDAY=$(($CURDAY - 7))
# CUTOFFDATE=`date "+%Y-%m-"`$CUTOFFDAY
 CUTOFFMONTH=12
 CUTOFFDATE=`date "+%Y-"`$CUTOFFMONTH-$CUTOFFDAY
fi

echo $CUTOFFDATE
exit 0

# Find the oldest file matching the cutoff date
cd $BACKUP
OLDESTCUTOFF=`ls -1t backup-*-$CUTOFFDATE.dmg | tail -1`

# Find the files older than the cutoff date and clean them up
FILESTOCLEANUP=`find $BACKUP -not -newer $OLDESTCUTOFF -and -not -name $OLDESTCUTOFF`

echo These files would be trashed:
if [ -z $FILESTOCLEANUP ]
then
 echo $FILESTOCLEANUP
 cp $FILESTOCLEANUP $TRASH
#rm $FILESTOCLEANUP
fi

# Copy the cutoff date files to the archive location
cp $BACKUP/backup-*-$CUTOFFDATE.dmg $ARCHIVE

echo These files should be archived:
echo `ls -1t $ARCHIVE`
